#pragma once
#include <string>;

#ifdef LOADER_OBJ//PARA COMPILAR CIERTO CODIGO O NO

#else // MYNEWDLL_EXPORTS //PARA COMPILAR CIERTO CODIGO O NO

#define LOADER_OBJ extern "C" __declspec(dllimport)
#endif
#pragma once

int m_currentVertex, m_currentNormal, m_currentUV, m_currentFace;	// Aux counters used when loading an object from file

bool readObjFile(const char * const filename, bool countOnly, bool &finishRead, int &timeRead);		// Read object from file 
bool readObjFileMaya(const char * const filename, bool countOnly, bool &finishRead, int &timeRead);     // Read maya version
bool parseObjLine(													// Parse line
	std::string line,
	bool countOnly,
	int lineNumber);
bool readMtllib(													// Read mtllib
	std::string mtlLibFilename,
	std::string &materialName,
	std::string &materialFilename);

bool readMtllibMaya(													// Read mtllib
	std::string mtlLibFilename,
	std::string &materialName,
	std::string &materialFilename,
	int i);



void reset();														// Cleanup any allocated memory
void resetCurrents();
bool loadFromFile(const char * const filename);

bool  loaderOBJObject(float *vertices, int *numVertices, float *normals,int *numNormals,float *uvCoords,int  *numUVCoords, const char * const filename );
void loadObject(const char * const filename );


struct m_objeto
{
	int s_currentVertex, s_currentNormal, s_currentUV, s_currentFace;
	unsigned short *s_vertexIndices;                                  // Dynamically-allocated array of vertex indices for this model
	unsigned short *s_normalIndices;                                  // Dynamically-allocated array of normal indices for this model
	unsigned short *s_UVindices;                                      // Dynamically-allocated array of UV coord indices for this model
	unsigned int s_textureObjectId;
	unsigned int m_shaderProgramId;                                   // Shader program identifier generated by OpenGL

	float *s_verticesRaw;                                             // Dynamically-allocated array of vertices (raw float values)
	float *s_normalsRaw;                                              // Dynamically-allocated array of normals (raw float values)
	float *s_uvCoordsRaw;                                             // Dynamically-allocated array of UV coords (raw float values)

	char *s_modelTextureFilename;

	bool s_modelHasNormals;											  // Flag to determine if this model has normals
	bool s_modelHasUVs;												  // Flag to determine if this model has UVs
	bool s_modelHasTextures;										  // Flag to determine if this model has a valid texture filename

	std::vector<std::string> vVertices;
	std::vector<std::string> vNormales;
	std::vector<std::string> vTexturas;
	std::vector<std::string> vFaces;

	std::string s_materialName;
	std::string s_materialFilename;
	std::string s_mtlLibFilename;
};
m_objeto m_obj;
vector<m_objeto> m_objetos;

int m_numVertices, m_numNormals, m_numUVCoords, m_numFaces;       // Total number of vertices, normals, UV coords, and faces in this model

bool m_Initialized;                                               // Does this C3DModel object contain valid data? (loaded from file)
bool m_modelHasNormals;											  // Flag to determine if this model has normals
bool m_modelHasUVs;												  // Flag to determine if this model has UVs
bool m_modelHasTextures;										  // Flag to determine if this model has a valid texture filename
char *m_modelTextureFilename;
bool m_isObj = false;

unsigned int m_shaderProgramId;                                   // Shader program identifier generated by OpenGL
unsigned int m_graphicsMemoryObjectId;                            // Vertex Array Object identifier generated by OpenGL
unsigned int m_textureObjectId;									  // Texture object identifier generated by OpenGL

unsigned short *m_vertexIndices;                                  // Dynamically-allocated array of vertex indices for this model
unsigned short *m_normalIndices;                                  // Dynamically-allocated array of normal indices for this model
unsigned short *m_UVindices;                                      // Dynamically-allocated array of UV coord indices for this model

float *m_verticesRaw;                                             // Dynamically-allocated array of vertices (raw float values)
float *m_normalsRaw;                                              // Dynamically-allocated array of normals (raw float values)
float *m_uvCoordsRaw;                                             // Dynamically-allocated array of UV coords (raw float values)


/*
//define variable export 
CREANDO_DLL int g_nResult;
//define  exported function prototypes here
CREANDO_DLL int AddTwoNumbers(int n1, int n2);*/